// Generated by CoffeeScript 2.7.0
var DemoComp, DemoDateRangeSelect, DemoForm, DemoGrowingRect, DemoList, DemoRadio, DemoSimplifyRatio, SGlobal, button, demos, div, form, input, label, option, select, showDemo, span, textarea;

import Lightue, {
  useState,
  useProp
} from '../dist/lightue.min.js';

({div, span, label, input, form, textarea, select, option, button} = Lightue);

SGlobal = useState({
  curDemo: 0
});

DemoComp = () => {
  var Btn, S;
  S = useState({
    aaa: 123,
    bbb: {
      ccc: '345'
    }
  });
  Btn = (props, onclick) => {
    var P;
    P = useProp(props);
    return div({}, div.desc(() => {
      return "component received param text: " + P.text;
    }), button.btn({
      _type: 'button',
      onclick: onclick
    }, P.$text));
  };
  return div({}, div.states({}, 'parent states:', div.aaa(() => {
    return `aaa: ${S.aaa}`;
  }), div.bbbccc(() => {
    return `bbb.ccc: ${S.bbb.ccc}`;
  })), Btn((function() {
    return {
      text: S.aaa
    };
  }), function() {
    return S.aaa += 4;
  }), Btn((function() {
    return {
      text: S.bbb.ccc
    };
  }), function() {
    return S.bbb.ccc += 5;
  }));
};

DemoGrowingRect = () => {
  var S, growHeight, growWidth;
  S = useState({
    width: 20,
    height: 30
  });
  growWidth = setInterval(() => {
    return S.width++;
  }, 500);
  growHeight = setInterval(() => {
    return S.height++;
  }, 800);
  return div({
    $cleanup: () => {
      clearInterval(growWidth);
      return clearInterval(growHeight);
    }
  }, 'width and height are: ', div.result(() => {
    return `${S.width}:${S.height}`;
  }), div.rect({
    style: () => {
      return `background-color: green; width: ${S.width}px; height: ${S.height}px`;
    }
  }));
};

DemoDateRangeSelect = () => {
  var S, dateEquals, i, j, m, month, monthLength, selectDate, today, y;
  S = useState({
    selectStart: null,
    selectEnd: null
  });
  selectDate = (date) => {
    if (S.selectStart && S.selectStart < date && S.selectEnd === null) {
      return S.selectEnd = date;
    } else {
      S.selectStart = date;
      return S.selectEnd = null;
    }
  };
  dateEquals = (d1, d2) => {
    if (d1 === null || d2 === null) {
      return false;
    } else {
      return d1.getTime() === d2.getTime();
    }
  };
  today = new Date();
  y = today.getFullYear();
  m = today.getMonth();
  return div({}, div.weekTitle({}, div('Sunday', span.end('*')), div('Monday'), div('Tuesday'), div('Wednesday'), div('Thursday'), div('Friday'), div('Saterday', span.end('*'))), div.months((function() {
    var k, results;
    results = [];
    for (i = k = 0; k < 13; i = ++k) {
      month = new Date(y, m + i);
      monthLength = new Date(y, m + i + 1, 0).getDate();
      results.push(div(div.name(`${month.getFullYear()}/${month.getMonth() + 1}`, div.days({}, ((function() {
        var l, ref, results1;
        results1 = [];
        for (j = l = 0, ref = month.getDay(); (0 <= ref ? l < ref : l > ref); j = 0 <= ref ? ++l : --l) {
          results1.push(div());
        }
        return results1;
      })()).concat((function() {
        var l, ref, results1;
        results1 = [];
        for (j = l = 0, ref = monthLength; (0 <= ref ? l < ref : l > ref); j = 0 <= ref ? ++l : --l) {
          results1.push(((d) => {
            return div({
              $class: {
                deepBlue: () => {
                  return dateEquals(d, S.selectStart) || (S.selectEnd && dateEquals(d, S.selectEnd));
                },
                lightBlue: () => {
                  return d > S.selectStart && S.selectEnd && d < S.selectEnd;
                }
              },
              onclick: (e) => {
                return selectDate(d);
              }
            }, j + 1);
          })(new Date(y, m + i, j + 1)));
        }
        return results1;
      }).call(this))))));
    }
    return results;
  }).call(this), div.selectedText({
    $class: {
      hidden: () => {
        return S.selectEnd === null;
      }
    }
  }, () => {
    if (S.selectEnd === null) {
      return '';
    } else {
      return `${S.selectStart.toLocaleDateString()}~${S.selectEnd.toLocaleDateString()}`;
    }
  })));
};

DemoSimplifyRatio = () => {
  var S, calcRatio, getGCD;
  S = useState({
    w: '1',
    h: '1'
  });
  calcRatio = (a, b) => {
    var gcd;
    gcd = getGCD(a, b);
    if (gcd) {
      return `${a / gcd}:${b / gcd}`;
    } else {
      return '';
    }
  };
  // greatest common divider
  getGCD = (a, b) => {
    var c, r;
    if (a === '' || b === '') {
      return null;
    } else if (a === b) {
      return a;
    } else {
      if (a < b) {
        c = a;
        a = b;
        b = c;
      }
      r = a % b;
      if (r === 0) {
        return b;
      } else if (r === 1) {
        return 1;
      } else {
        return getGCD(b, r);
      }
    }
  };
  return div({}, div.inputs({}, input.width({
    type: 'number',
    value: () => {
      return S.w;
    },
    oninput: (e) => {
      return S.w = e.target.value;
    }
  }), ':', input.height({
    type: 'number',
    value: () => {
      return S.h;
    },
    oninput: (e) => {
      return S.h = e.target.value;
    }
  })), div.result, div.label('the ratio simplified is:'), div.content(() => {
    return calcRatio(S.w, S.h);
  }));
};

DemoList = () => {
  var S, changeList, count;
  S = useState({
    list: [],
    action: 'change',
    newTitle: false,
    count: 0
  });
  count = 0;
  changeList = setInterval(() => {
    var i, k, ref, temp;
    count++;
    S.newTitle = !S.newTitle;
    if (S.action === 'push') {
      S.action = 'splice';
      return S.list.splice(2, 2, 'spliced item');
    } else if (S.action === 'change') {
      S.action = 'push';
      return S.list.push(Math.random());
    } else {
      temp = [];
      for (i = k = 0, ref = count; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
        temp.push(Math.random());
      }
      S.list = temp;
      return S.action = 'change';
    }
  }, 2500);
  return div({
    $cleanup: () => {
      return clearInterval(changeList);
    }
  }, div.title({
    $class: {
      newTitle: () => {
        return S.newTitle;
      }
    }
  }, div.content(() => {
    return `List ${S.action}d`;
  })), div.theList, div.beforeList(() => {
    return `The list starts with length: ${S.list.length}`;
  }), () => {
    return S.list.map((num) => {
      return div.randomNum(num);
    });
  }, div.afterList('The list ends'));
};

DemoForm = () => {
  var S;
  S = useState({
    formData: {
      name: 'ABC',
      description: "I'm new to Lightue!\nHow about you?",
      workDone: true,
      group: 'groupA'
    }
  });
  return form.demoForm({}, label({}, 'name: ', input({
    type: 'text',
    $value: () => {
      return S.formData.name;
    },
    oninput: (e) => {
      return S.formData.name = e.target.value;
    }
  })), label({}, 'description: ', textarea({
    $value: () => {
      return S.formData.description;
    },
    oninput: (e) => {
      return S.formData.description = e.target.value;
    }
  })), label({}, 'work done? ', input({
    type: 'checkbox',
    $checked: () => {
      return S.formData.workDone;
    },
    onchange: (e) => {
      return S.formData.workDone = e.target.checked;
    }
  })), label({}, 'group: ', select({
    $value: () => {
      return S.formData.group;
    },
    onchange: (e) => {
      return S.formData.group = e.target.value;
    }
  }, ['', 'groupA', 'groupB', 'groupC', 'groupD'].map((op) => {
    return option({
      value: op
    }, op);
  }))), div.result(() => {
    return JSON.stringify(S.formData);
  }));
};

showDemo = function(e) {
  return SGlobal.curDemo = Number(this.value);
};

DemoRadio = (index, name, checked) => {
  return label({
    $class: {
      current: () => {
        return SGlobal.curDemo === index;
      }
    }
  }, input.demoRadio({
    type: 'radio',
    name: 'demo',
    value: index,
    checked: checked ? 'checked' : null,
    onchange: showDemo
  }), name);
};

demos = [DemoComp, DemoGrowingRect, DemoDateRangeSelect, DemoSimplifyRatio, DemoList, DemoForm];

Lightue(div.selectDemo({}, demos.map((demo, i) => {
  return DemoRadio(i, demo.name, i === 0);
})), div.demosGround({}, div(() => {
  return demos[SGlobal.curDemo]();
})));
